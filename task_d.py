"""
–ú–æ–¥—É–ª—å –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ë–î.
–°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å TaskDialog —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–∞–±–ª–∏—Ü.
"""
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
                              QTableWidget, QTableWidgetItem, QHeaderView, QMessageBox,
                              QComboBox, QLineEdit, QMenu, QInputDialog, QCheckBox,
                              QSpinBox, QFormLayout, QTextEdit, QDialogButtonBox, QWidget,
                              QButtonGroup, QRadioButton, QScrollArea, QGroupBox)
from PySide6.QtCore import Qt
from PySide6.QtGui import QAction
from controller import NumericTableItem
from logger import Logger


class TaskDialog(QDialog):
    """
    –î–∏–∞–ª–æ–≥ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –ë–î.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ALTER TABLE, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ SELECT, –ø–æ–∏—Å–∫, JOIN –∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    def __init__(self, controller, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.logger = Logger()

        self.current_table = None
        self.current_columns = []
        self.all_columns_info = []
        self.is_join_mode = False
        self.selected_tables_for_join = []

        self.setWindowTitle("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–î")
        self.setMinimumSize(1200, 700)

        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_layout = QHBoxLayout()
        title_label = QLabel("<h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –ë–î</h2>")
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        layout.addLayout(title_layout)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞: –æ–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ / JOIN
        mode_layout = QHBoxLayout()
        mode_layout.addWidget(QLabel("<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>"))

        self.mode_group = QButtonGroup(self)
        self.table_mode_radio = QRadioButton("–û–±—ã—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        self.join_mode_radio = QRadioButton("–ú–µ—Ç–æ–¥ JOIN")
        self.table_mode_radio.setChecked(True)

        self.mode_group.addButton(self.table_mode_radio)
        self.mode_group.addButton(self.join_mode_radio)

        self.table_mode_radio.toggled.connect(self.on_mode_changed)

        mode_layout.addWidget(self.table_mode_radio)
        mode_layout.addWidget(self.join_mode_radio)
        mode_layout.addStretch()
        layout.addLayout(mode_layout)

        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü/—Å—Ç–æ–ª–±—Ü–æ–≤
        self.selection_widget = QWidget()
        self.selection_layout = QVBoxLayout(self.selection_widget)
        layout.addWidget(self.selection_widget)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        self.data_table = QTableWidget()
        self.data_table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
        self.data_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.data_table.setSelectionBehavior(QTableWidget.SelectItems)  # –í—ã–±–æ—Ä —è—á–µ–µ–∫
        self.data_table.setSelectionMode(QTableWidget.SingleSelection)  # –û–¥–Ω–∞ —è—á–µ–π–∫–∞
        self.data_table.verticalHeader().setVisible(False)

        # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        layout.addWidget(self.data_table)

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        buttons_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        self.search_btn = QPushButton("üîç –ü–æ–∏—Å–∫")
        self.search_btn.clicked.connect(self.open_search_dialog)
        buttons_layout.addWidget(self.search_btn)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.edit_btn = QPushButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.edit_btn.clicked.connect(self.open_edit_dialog)
        buttons_layout.addWidget(self.edit_btn)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.add_btn.clicked.connect(self.open_add_dialog)
        buttons_layout.addWidget(self.add_btn)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self.delete_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.clicked.connect(self.open_delete_dialog)
        buttons_layout.addWidget(self.delete_btn)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.sort_btn = QPushButton("üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞/–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        self.sort_btn.clicked.connect(self.open_sort_filter_dialog)
        buttons_layout.addWidget(self.sort_btn)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.display_btn = QPushButton("üìã –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
        self.display_btn.clicked.connect(self.open_display_dialog)
        buttons_layout.addWidget(self.display_btn)

        buttons_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(close_btn)

        layout.addLayout(buttons_layout)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞
        self.update_selection_panel()

    def on_mode_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
        self.is_join_mode = self.join_mode_radio.isChecked()
        self.update_selection_panel()

    def update_selection_panel(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü/—Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–Ω–µ–ª—å
        while self.selection_layout.count():
            child = self.selection_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        if self.is_join_mode:
            # –†–µ–∂–∏–º JOIN
            self.setup_join_selection()
        else:
            # –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            self.setup_table_selection()

    def setup_table_selection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        table_layout = QHBoxLayout()
        table_layout.addWidget(QLabel("–¢–∞–±–ª–∏—Ü–∞:"))

        self.table_combo = QComboBox()
        self.table_combo.setMinimumWidth(200)
        tables = self.controller.get_all_tables()
        self.table_combo.addItems(tables)
        self.table_combo.currentTextChanged.connect(self.on_table_selected)
        table_layout.addWidget(self.table_combo)
        table_layout.addStretch()

        self.selection_layout.addLayout(table_layout)

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ —á–µ—Ä–µ–∑ –≥–∞–ª–æ—á–∫–∏
        columns_group = QGroupBox("–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        columns_scroll = QScrollArea()
        columns_scroll.setWidgetResizable(True)
        columns_scroll.setMaximumHeight(150)

        self.columns_widget = QWidget()
        self.columns_checks_layout = QVBoxLayout(self.columns_widget)
        self.columns_checks = {}

        columns_scroll.setWidget(self.columns_widget)
        columns_group_layout = QVBoxLayout(columns_group)
        columns_group_layout.addWidget(columns_scroll)

        self.selection_layout.addWidget(columns_group)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        if self.table_combo.count() > 0:
            self.on_table_selected(self.table_combo.currentText())

    def setup_join_selection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –¥–ª—è JOIN."""
        # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü –¥–ª—è JOIN
        tables_group = QGroupBox("–í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
        tables_scroll = QScrollArea()
        tables_scroll.setWidgetResizable(True)
        tables_scroll.setMaximumHeight(100)

        tables_widget = QWidget()
        self.tables_checks_layout = QVBoxLayout(tables_widget)
        self.tables_checks = {}

        all_tables = self.controller.get_all_tables()
        for table in all_tables:
            check = QCheckBox(table)
            check.stateChanged.connect(self.on_join_tables_changed)
            self.tables_checks[table] = check
            self.tables_checks_layout.addWidget(check)

        tables_scroll.setWidget(tables_widget)
        tables_group_layout = QVBoxLayout(tables_group)
        tables_group_layout.addWidget(tables_scroll)

        self.selection_layout.addWidget(tables_group)

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü)
        self.join_columns_group = QGroupBox("–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        self.join_columns_scroll = QScrollArea()
        self.join_columns_scroll.setWidgetResizable(True)
        self.join_columns_scroll.setMaximumHeight(150)

        self.join_columns_widget = QWidget()
        self.join_columns_layout = QVBoxLayout(self.join_columns_widget)
        self.join_column_checks = {}

        self.join_columns_scroll.setWidget(self.join_columns_widget)
        join_columns_group_layout = QVBoxLayout(self.join_columns_group)
        join_columns_group_layout.addWidget(self.join_columns_scroll)

        self.selection_layout.addWidget(self.join_columns_group)
        self.join_columns_group.setVisible(False)

    def on_table_selected(self, table_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        if not table_name:
            return

        self.current_table = table_name

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.all_columns_info = self.controller.get_table_columns(table_name)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        while self.columns_checks_layout.count():
            child = self.columns_checks_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        self.columns_checks.clear()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        for col in self.all_columns_info:
            check = QCheckBox(f"{col['name']} ({col['type']})")
            check.setChecked(True)
            check.stateChanged.connect(self.on_columns_changed)
            self.columns_checks[col['name']] = check
            self.columns_checks_layout.addWidget(check)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_table_data()

    def on_join_tables_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è JOIN."""
        selected_tables = [name for name, check in self.tables_checks.items() if check.isChecked()]

        if len(selected_tables) < 1:
            self.join_columns_group.setVisible(False)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.join_columns_group.setVisible(True)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã
        while self.join_columns_layout.count():
            child = self.join_columns_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

        self.join_column_checks.clear()

        # –°–æ–∑–¥–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        for table in selected_tables:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            table_label = QLabel(f"<b>{table}:</b>")
            self.join_columns_layout.addWidget(table_label)

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
            columns = self.controller.get_table_columns(table)
            for col in columns:
                check = QCheckBox(f"  {col['name']} ({col['type']})")
                check.setChecked(True)
                self.join_column_checks[f"{table}.{col['name']}"] = check
                self.join_columns_layout.addWidget(check)

    def on_columns_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤."""
        self.load_table_data()

    def load_table_data(self, where=None, order_by=None, group_by=None, having=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã."""
        if not self.current_table:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        selected_columns = [name for name, check in self.columns_checks.items() if check.isChecked()]

        if not selected_columns:
            self.data_table.setRowCount(0)
            self.data_table.setColumnCount(0)
            return

        self.current_columns = selected_columns

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.controller.get_table_data(
            self.current_table,
            selected_columns,
            where,
            order_by,
            group_by,
            having
        )

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.data_table.setColumnCount(len(self.current_columns))
        self.data_table.setHorizontalHeaderLabels(self.current_columns)
        self.data_table.setRowCount(len(data))

        for row_idx, row_data in enumerate(data):
            for col_idx, value in enumerate(row_data):
                str_value = str(value) if value is not None else ""

                if isinstance(value, (int, float)):
                    item = NumericTableItem(str_value, value)
                else:
                    item = QTableWidgetItem(str_value)

                self.data_table.setItem(row_idx, col_idx, item)

        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã {self.current_table}: {len(data)} —Å—Ç—Ä–æ–∫")

    def open_search_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–∏—Å–∫–∞."""
        if not self.current_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        dialog = SearchDialog(self.controller, self.current_table, self.all_columns_info, self)
        if dialog.exec_():
            self.load_table_data(where=dialog.search_condition)

    def open_edit_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if not self.current_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        dialog = EditDialog(self.controller, self.current_table, self.all_columns_info, self.data_table, self)
        if dialog.exec_():
            self.load_table_data()

    def open_add_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
        if not self.current_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        dialog = AddDialog(self.controller, self.current_table, self.all_columns_info, self)
        if dialog.exec_():
            self.load_table_data()

    def open_delete_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è."""
        if not self.current_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        dialog = DeleteDialog(self.controller, self.current_table, self.all_columns_info, self.data_table, self)
        if dialog.exec_():
            self.load_table_data()

    def open_sort_filter_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        if not self.current_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        dialog = SortFilterDialog(self.controller, self.current_table, self.all_columns_info, self)
        if dialog.exec_():
            self.load_table_data(
                where=dialog.where_clause,
                order_by=dialog.order_clause,
                group_by=dialog.group_clause,
                having=dialog.having_clause
            )

    def open_display_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)."""
        dialog = DisplayDialog(self.controller, self.current_table, self)
        if dialog.exec_():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞
            self.update_selection_panel()


class AddColumnDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
    def __init__(self, controller, table_name, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name

        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        self.setMinimumWidth(400)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QFormLayout(self)

        self.name_edit = QLineEdit()
        layout.addRow("–ò–º—è —Å—Ç–æ–ª–±—Ü–∞:", self.name_edit)

        self.type_combo = QComboBox()
        self.type_combo.addItems([
            "INTEGER", "BIGINT", "VARCHAR(100)", "VARCHAR(200)",
            "TEXT", "BOOLEAN", "DATE", "TIMESTAMP", "NUMERIC"
        ])
        layout.addRow("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", self.type_combo)

        self.nullable_check = QCheckBox("–ú–æ–∂–µ—Ç –±—ã—Ç—å NULL")
        self.nullable_check.setChecked(True)
        layout.addRow("", self.nullable_check)

        self.default_edit = QLineEdit()
        layout.addRow("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.default_edit)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept_dialog)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)

    def accept_dialog(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        name = self.name_edit.text().strip()
        if not name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞")
            return

        data_type = self.type_combo.currentText()
        nullable = self.nullable_check.isChecked()
        default = self.default_edit.text().strip() if self.default_edit.text().strip() else None

        success, error = self.controller.add_column(
            self.table_name, name, data_type, nullable, default
        )

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            self.accept()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")


class EditColumnDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        self.setMinimumWidth(450)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
        column_layout = QHBoxLayout()
        column_layout.addWidget(QLabel("–°—Ç–æ–ª–±–µ—Ü:"))
        self.column_combo = QComboBox()
        self.column_combo.addItems([col['name'] for col in self.columns_info])
        column_layout.addWidget(self.column_combo)
        layout.addLayout(column_layout)

        # –û–ø–µ—Ä–∞—Ü–∏–∏
        operations_label = QLabel("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>")
        layout.addWidget(operations_label)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        rename_btn = QPushButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        rename_btn.clicked.connect(self.rename_column)
        layout.addWidget(rename_btn)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
        change_type_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
        change_type_btn.clicked.connect(self.change_column_type)
        layout.addWidget(change_type_btn)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        set_constraint_btn = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        set_constraint_btn.clicked.connect(self.set_constraint)
        layout.addWidget(set_constraint_btn)

        # –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        drop_constraint_btn = QPushButton("–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        drop_constraint_btn.clicked.connect(self.drop_constraint)
        layout.addWidget(drop_constraint_btn)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        delete_btn.clicked.connect(self.delete_column)
        delete_btn.setStyleSheet("background-color: #d32f2f; color: white;")
        layout.addWidget(delete_btn)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)

    def get_current_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        return self.column_combo.currentText()

    def rename_column(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        old_name = self.get_current_column()
        new_name, ok = QInputDialog.getText(
            self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞",
            f"–ù–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{old_name}':",
            text=old_name
        )

        if ok and new_name and new_name != old_name:
            success, error = self.controller.rename_column(self.table_name, old_name, new_name)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_name} ‚Üí {new_name}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
                current_index = self.column_combo.currentIndex()
                self.columns_info[current_index]['name'] = new_name
                self.column_combo.setItemText(current_index, new_name)
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")

    def change_column_type(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        types = ["INTEGER", "BIGINT", "VARCHAR(100)", "VARCHAR(200)", "TEXT", "BOOLEAN", "DATE", "TIMESTAMP", "NUMERIC"]
        new_type, ok = QInputDialog.getItem(
            self, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞",
            f"–ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{column}':",
            types, 0, False
        )

        if ok and new_type:
            success, error = self.controller.alter_column_type(self.table_name, column, new_type)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ '{column}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_type}")
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞:\n{error}")

    def set_constraint(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü."""
        column = self.get_current_column()

        constraints = ["NOT NULL", "UNIQUE", "CHECK"]
        constraint, ok = QInputDialog.getItem(
            self, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è '{column}':",
            constraints, 0, False
        )

        if not ok:
            return

        constraint_value = None
        if constraint == "CHECK":
            constraint_value, ok = QInputDialog.getText(
                self, "–£—Å–ª–æ–≤–∏–µ CHECK",
                f"–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ CHECK –¥–ª—è '{column}':\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: {column} > 0)"
            )
            if not ok or not constraint_value:
                return

        success, error = self.controller.set_constraint(
            self.table_name, column, constraint, constraint_value
        )

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {constraint} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü '{column}'")
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:\n{error}")

    def drop_constraint(self):
        """–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        constraints = ["NOT NULL", "UNIQUE", "CHECK"]
        constraint, ok = QInputDialog.getItem(
            self, "–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å '{column}':",
            constraints, 0, False
        )

        if ok:
            success, error = self.controller.drop_constraint(self.table_name, column, constraint)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {constraint} —Å–Ω—è—Ç–æ —Å–æ —Å—Ç–æ–ª–±—Ü–∞ '{column}'")
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:\n{error}")

    def delete_column(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        confirm = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü '{column}'?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            QMessageBox.Yes | QMessageBox.No
        )

        if confirm == QMessageBox.Yes:
            success, error = self.controller.drop_column(self.table_name, column)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column}' —É–¥–∞–ª–µ–Ω")
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")


class AddRecordDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info
        self.field_widgets = {}

        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QFormLayout(self)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        for col in self.columns_info:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SERIAL —Å—Ç–æ–ª–±—Ü—ã (–æ–Ω–∏ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ)
            if 'serial' in col.get('type', '').lower() or 'nextval' in str(col.get('default', '')).lower():
                continue

            widget = QLineEdit()
            if col.get('default'):
                widget.setPlaceholderText(f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: {col['default']}")

            self.field_widgets[col['name']] = widget
            label_text = col['name']
            if not col.get('nullable', True):
                label_text += " *"
            layout.addRow(f"{label_text}:", widget)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept_dialog)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)

    def accept_dialog(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        data = {}
        for col_name, widget in self.field_widgets.items():
            value = widget.text().strip()
            if value:
                data[col_name] = value

        if not data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ")
            return

        success, error = self.controller.insert_row(self.table_name, data)

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            self.accept()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{error}")


class EditRecordDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
    def __init__(self, controller, table_name, columns_info, current_data, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info
        self.current_data = current_data
        self.field_widgets = {}

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QFormLayout(self)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        for col in self.columns_info:
            col_name = col['name']
            widget = QLineEdit()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if col_name in self.current_data:
                widget.setText(str(self.current_data[col_name]))

            self.field_widgets[col_name] = widget

            # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–æ–±—ã—á–Ω–æ ID) –¥–µ–ª–∞–µ–º readonly
            if col_name == self.columns_info[0]['name']:
                widget.setReadOnly(True)
                widget.setStyleSheet("background-color: #f0f0f0;")

            layout.addRow(f"{col_name}:", widget)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept_dialog)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)

    def accept_dialog(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π."""
        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è WHERE
        first_col = self.columns_info[0]['name']
        where_value = self.field_widgets[first_col].text()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞)
        data = {}
        for col_name, widget in self.field_widgets.items():
            if col_name != first_col:
                value = widget.text().strip()
                if value:
                    data[col_name] = value

        if not data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return

        where_clause = f"{first_col} = %s"
        success, error = self.controller.update_row(
            self.table_name, data, where_clause, [where_value]
        )

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            self.accept()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{error}")


class SearchDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info
        self.search_condition = None

        self.setWindowTitle("–ü–æ–∏—Å–∫")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–ü–æ–∏—Å–∫ –ø–æ —Ç–∞–±–ª–∏—Ü–µ</h3>"))

        form_layout = QFormLayout()

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
        self.column_combo = QComboBox()
        self.column_combo.addItems([col['name'] for col in self.columns_info])
        form_layout.addRow("–°—Ç–æ–ª–±–µ—Ü:", self.column_combo)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        self.search_type_combo = QComboBox()
        self.search_type_combo.addItems([
            "LIKE (—à–∞–±–ª–æ–Ω)",
            "POSIX ~ (—Ä–µ–≥—É–ª—è—Ä–∫–∞)",
            "POSIX ~* (—Ä–µ–≥—É–ª—è—Ä–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)",
            "POSIX !~ (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç)",
            "POSIX !~* (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)",
            "= (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"
        ])
        form_layout.addRow("–¢–∏–ø –ø–æ–∏—Å–∫–∞:", self.search_type_combo)

        # –¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
        self.search_text = QLineEdit()
        self.search_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        form_layout.addRow("–¢–µ–∫—Å—Ç:", self.search_text)

        layout.addLayout(form_layout)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = QLabel(
            "<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è LIKE –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ % –∫–∞–∫ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª<br>"
            "–ü—Ä–∏–º–µ—Ä: %—Ç–µ–∫—Å—Ç% –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '—Ç–µ–∫—Å—Ç'</i>"
        )
        hint_label.setWordWrap(True)
        layout.addWidget(hint_label)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept_dialog)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

    def accept_dialog(self):
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞."""
        column = self.column_combo.currentText()
        search_text = self.search_text.text().strip()

        if not search_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return

        search_type = self.search_type_combo.currentText()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        if "LIKE" in search_type:
            self.search_condition = f"{column} LIKE '{search_text}'"
        elif "~*" in search_type and "!" in search_type:
            self.search_condition = f"{column} !~* '{search_text}'"
        elif "~*" in search_type:
            self.search_condition = f"{column} ~* '{search_text}'"
        elif "!~" in search_type:
            self.search_condition = f"{column} !~ '{search_text}'"
        elif "~" in search_type:
            self.search_condition = f"{column} ~ '{search_text}'"
        else:  # —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            self.search_condition = f"{column} = '{search_text}'"

        self.accept()


class StringFunctionsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.setWindowTitle("–°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        self.setMinimumWidth(600)
        self.setMinimumHeight(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</h3>"))

        form_layout = QFormLayout()

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
        self.column_combo = QComboBox()
        string_columns = [col['name'] for col in self.columns_info
                         if 'char' in col.get('type', '').lower() or 'text' in col.get('type', '').lower()]
        if not string_columns:
            string_columns = [col['name'] for col in self.columns_info]
        self.column_combo.addItems(string_columns)
        form_layout.addRow("–°—Ç–æ–ª–±–µ—Ü:", self.column_combo)

        # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        self.function_combo = QComboBox()
        self.function_combo.addItems([
            "UPPER (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)",
            "LOWER (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)",
            "SUBSTRING (–ø–æ–¥—Å—Ç—Ä–æ–∫–∞)",
            "TRIM (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤)",
            "LTRIM (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ —Å–ª–µ–≤–∞)",
            "RTRIM (—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ —Å–ø—Ä–∞–≤–∞)",
            "LPAD (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–≤–∞)",
            "RPAD (–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞)",
            "CONCAT (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)",
            "LENGTH (–¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏)"
        ])
        self.function_combo.currentTextChanged.connect(self.on_function_changed)
        form_layout.addRow("–§—É–Ω–∫—Ü–∏—è:", self.function_combo)

        layout.addLayout(form_layout)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.params_widget = QWidget()
        self.params_layout = QFormLayout(self.params_widget)
        layout.addWidget(self.params_widget)

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        layout.addWidget(QLabel("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>"))
        self.result_table = QTableWidget()
        self.result_table.setEditTriggers(QTableWidget.NoEditTriggers)
        layout.addWidget(self.result_table)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é")
        apply_btn.clicked.connect(self.apply_function)
        buttons_layout.addWidget(apply_btn)

        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(close_btn)

        layout.addLayout(buttons_layout)

        self.on_function_changed(self.function_combo.currentText())

    def on_function_changed(self, function_text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        while self.params_layout.rowCount() > 0:
            self.params_layout.removeRow(0)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        if "SUBSTRING" in function_text:
            self.start_pos = QSpinBox()
            self.start_pos.setRange(1, 1000)
            self.start_pos.setValue(1)
            self.params_layout.addRow("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:", self.start_pos)

            self.length = QSpinBox()
            self.length.setRange(1, 1000)
            self.length.setValue(10)
            self.params_layout.addRow("–î–ª–∏–Ω–∞:", self.length)

        elif "LPAD" in function_text or "RPAD" in function_text:
            self.pad_length = QSpinBox()
            self.pad_length.setRange(1, 1000)
            self.pad_length.setValue(20)
            self.params_layout.addRow("–î–ª–∏–Ω–∞:", self.pad_length)

            self.pad_char = QLineEdit()
            self.pad_char.setText(" ")
            self.pad_char.setMaxLength(1)
            self.params_layout.addRow("–°–∏–º–≤–æ–ª:", self.pad_char)

        elif "CONCAT" in function_text:
            self.concat_text = QLineEdit()
            self.concat_text.setPlaceholderText("–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            self.params_layout.addRow("–¢–µ–∫—Å—Ç:", self.concat_text)

            self.concat_position = QComboBox()
            self.concat_position.addItems(["–í –Ω–∞—á–∞–ª–µ", "–í –∫–æ–Ω—Ü–µ"])
            self.params_layout.addRow("–ü–æ–∑–∏—Ü–∏—è:", self.concat_position)

    def apply_function(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""
        column = self.column_combo.currentText()
        function = self.function_combo.currentText()

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if "UPPER" in function:
            sql_expr = f"UPPER({column})"
        elif "LOWER" in function:
            sql_expr = f"LOWER({column})"
        elif "SUBSTRING" in function:
            start = self.start_pos.value()
            length = self.length.value()
            sql_expr = f"SUBSTRING({column}, {start}, {length})"
        elif "LTRIM" in function:
            sql_expr = f"LTRIM({column})"
        elif "RTRIM" in function:
            sql_expr = f"RTRIM({column})"
        elif "TRIM" in function:
            sql_expr = f"TRIM({column})"
        elif "LPAD" in function:
            length = self.pad_length.value()
            char = self.pad_char.text() or ' '
            sql_expr = f"LPAD({column}, {length}, '{char}')"
        elif "RPAD" in function:
            length = self.pad_length.value()
            char = self.pad_char.text() or ' '
            sql_expr = f"RPAD({column}, {length}, '{char}')"
        elif "CONCAT" in function:
            text = self.concat_text.text()
            if self.concat_position.currentText() == "–í –Ω–∞—á–∞–ª–µ":
                sql_expr = f"'{text}' || {column}"
            else:
                sql_expr = f"{column} || '{text}'"
        elif "LENGTH" in function:
            sql_expr = f"LENGTH({column})"
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è")
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        query = f"SELECT {column} as original, {sql_expr} as result FROM {self.table_name} LIMIT 20"
        results = self.controller.execute_select(query)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            self.result_table.setColumnCount(2)
            self.result_table.setHorizontalHeaderLabels(["–û—Ä–∏–≥–∏–Ω–∞–ª", "–†–µ–∑—É–ª—å—Ç–∞—Ç"])
            self.result_table.setRowCount(len(results))

            for row_idx, row_data in enumerate(results):
                for col_idx, value in enumerate(row_data):
                    str_value = str(value) if value is not None else ""
                    item = QTableWidgetItem(str_value)
                    self.result_table.setItem(row_idx, col_idx, item)

            self.result_table.resizeColumnsToContents()
        else:
            QMessageBox.information(self, "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")


class DisplayOptionsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –æ–ø—Ü–∏–π –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.selected_columns = None
        self.where_clause = None
        self.order_clause = None
        self.group_clause = None
        self.having_clause = None
        self.is_join_mode = False
        self.join_config = None

        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞")
        self.setMinimumWidth(700)
        self.setMinimumHeight(600)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö</h3>"))

        # –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        join_btn = QPushButton("üîó –ú–∞—Å—Ç–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (JOIN)")
        join_btn.clicked.connect(self.open_join_wizard)
        layout.addWidget(join_btn)

        layout.addWidget(QLabel("<hr>"))
        layout.addWidget(QLabel("<b>–ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—ã—á–Ω—É—é –≤—ã–±–æ—Ä–∫—É:</b>"))

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        columns_group = QLabel("<b>–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤:</b>")
        layout.addWidget(columns_group)

        self.columns_checks = {}
        columns_layout = QVBoxLayout()

        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        for col in self.columns_info:
            check = QCheckBox(f"{col['name']} ({col['type']})")
            check.setChecked(True)
            self.columns_checks[col['name']] = check
            columns_layout.addWidget(check)

        layout.addLayout(columns_layout)

        # WHERE —É—Å–ª–æ–≤–∏–µ
        where_layout = QHBoxLayout()
        where_layout.addWidget(QLabel("WHERE:"))
        self.where_edit = QLineEdit()
        self.where_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: id > 5 AND name LIKE '%test%'")
        where_layout.addWidget(self.where_edit)
        layout.addLayout(where_layout)

        # ORDER BY
        order_layout = QHBoxLayout()
        order_layout.addWidget(QLabel("ORDER BY:"))
        self.order_edit = QLineEdit()
        self.order_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: id DESC, name ASC")
        order_layout.addWidget(self.order_edit)
        layout.addLayout(order_layout)

        # GROUP BY
        group_layout = QHBoxLayout()
        group_layout.addWidget(QLabel("GROUP BY:"))
        self.group_edit = QLineEdit()
        self.group_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: name")
        group_layout.addWidget(self.group_edit)
        layout.addLayout(group_layout)

        # HAVING
        having_layout = QHBoxLayout()
        having_layout.addWidget(QLabel("HAVING:"))
        self.having_edit = QLineEdit()
        self.having_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: COUNT(*) > 5")
        having_layout.addWidget(self.having_edit)
        layout.addLayout(having_layout)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept_dialog)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

    def open_join_wizard(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        wizard = JoinWizardDialog(self.controller, self.table_name, self)
        if wizard.exec_():
            self.is_join_mode = True
            self.join_config = wizard.get_join_config()
            self.accept()

    def accept_dialog(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        selected = [name for name, check in self.columns_checks.items() if check.isChecked()]
        self.selected_columns = selected if selected else None

        # –°–æ–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏—è
        self.where_clause = self.where_edit.text().strip() or None
        self.order_clause = self.order_edit.text().strip() or None
        self.group_clause = self.group_edit.text().strip() or None
        self.having_clause = self.having_edit.text().strip() or None

        self.accept()


class JoinWizardDialog(QDialog):
    """–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è JOIN –∑–∞–ø—Ä–æ—Å–æ–≤."""
    def __init__(self, controller, base_table, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.base_table = base_table

        self.setWindowTitle("–ú–∞—Å—Ç–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (JOIN)")
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel(f"<h3>–°–æ–∑–¥–∞–Ω–∏–µ JOIN –∑–∞–ø—Ä–æ—Å–∞</h3>"))
        layout.addWidget(QLabel(f"<b>–ë–∞–∑–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞:</b> {self.base_table}"))

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        join_table_layout = QHBoxLayout()
        join_table_layout.addWidget(QLabel("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:"))

        self.join_table_combo = QComboBox()
        all_tables = self.controller.get_all_tables()
        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞
        other_tables = [t for t in all_tables if t != self.base_table]
        self.join_table_combo.addItems(other_tables)
        join_table_layout.addWidget(self.join_table_combo)

        layout.addLayout(join_table_layout)

        # –¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        join_type_layout = QHBoxLayout()
        join_type_layout.addWidget(QLabel("–¢–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:"))

        self.join_type_combo = QComboBox()
        self.join_type_combo.addItems(["INNER", "LEFT", "RIGHT", "FULL"])
        join_type_layout.addWidget(self.join_type_combo)

        layout.addLayout(join_type_layout)

        # –£—Å–ª–æ–≤–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        layout.addWidget(QLabel("<b>–£—Å–ª–æ–≤–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (ON):</b>"))

        on_layout = QHBoxLayout()

        # –°—Ç–æ–ª–±–µ—Ü –∏–∑ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.base_column_combo = QComboBox()
        self.update_base_columns()
        on_layout.addWidget(QLabel(f"{self.base_table}."))
        on_layout.addWidget(self.base_column_combo)

        on_layout.addWidget(QLabel(" = "))

        # –°—Ç–æ–ª–±–µ—Ü –∏–∑ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.join_column_combo = QComboBox()
        on_layout.addWidget(QLabel(""))
        self.join_table_label = QLabel()
        on_layout.addWidget(self.join_table_label)
        on_layout.addWidget(QLabel("."))
        on_layout.addWidget(self.join_column_combo)

        layout.addLayout(on_layout)

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ - –°–û–ó–î–ê–ï–ú –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
        layout.addWidget(QLabel("<b>–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>"))

        self.columns_text = QTextEdit()
        self.columns_text.setPlaceholderText(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {self.base_table}.id, {self.base_table}.name, "
            f"{self.join_table_combo.currentText() if self.join_table_combo.count() > 0 else 'table2'}.field"
        )
        self.columns_text.setMaximumHeight(100)
        layout.addWidget(self.columns_text)

        # –¢–ï–ü–ï–†–¨ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.join_table_combo.currentTextChanged.connect(self.update_join_columns)
        self.update_join_columns(self.join_table_combo.currentText())

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        layout.addWidget(QLabel("<b>WHERE (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</b>"))
        self.where_edit = QLineEdit()
        layout.addWidget(self.where_edit)

        layout.addWidget(QLabel("<b>ORDER BY (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</b>"))
        self.order_edit = QLineEdit()
        layout.addWidget(self.order_edit)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

    def update_base_columns(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –±–∞–∑–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        columns = self.controller.get_table_columns(self.base_table)
        self.base_column_combo.clear()
        self.base_column_combo.addItems([col['name'] for col in columns])

    def update_join_columns(self, table_name):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        if not table_name:
            return

        self.join_table_label.setText(table_name)
        columns = self.controller.get_table_columns(table_name)
        self.join_column_combo.clear()
        self.join_column_combo.addItems([col['name'] for col in columns])

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        self.columns_text.setPlaceholderText(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: {self.base_table}.id, {self.base_table}.name, {table_name}.field"
        )

    def get_join_config(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JOIN."""
        join_table = self.join_table_combo.currentText()
        join_type = self.join_type_combo.currentText()

        base_col = self.base_column_combo.currentText()
        join_col = self.join_column_combo.currentText()

        on_condition = f"{self.base_table}.{base_col} = {join_table}.{join_col}"

        # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        columns_text = self.columns_text.toPlainText().strip()
        if columns_text:
            selected_columns = [col.strip() for col in columns_text.split(',')]
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã
            selected_columns = [f"{self.base_table}.*", f"{join_table}.*"]

        return {
            'tables_info': [
                {'name': self.base_table, 'alias': None}
            ],
            'selected_columns': selected_columns,
            'column_labels': [col.replace('.', '_') for col in selected_columns],
            'join_conditions': [
                {
                    'type': join_type,
                    'table': join_table,
                    'alias': None,
                    'on': on_condition
                }
            ],
            'where': self.where_edit.text().strip() or None,
            'order_by': self.order_edit.text().strip() or None
        }
}


# –ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–∫–æ–Ω

class EditDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏)."""
    def __init__(self, controller, table_name, columns_info, data_table, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info
        self.data_table = data_table

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</h3>"))

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
        edit_column_btn = QPushButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        edit_column_btn.clicked.connect(self.edit_column)
        layout.addWidget(edit_column_btn)

        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        edit_record_btn = QPushButton("‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å")
        edit_record_btn.clicked.connect(self.edit_record)
        layout.addWidget(edit_record_btn)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)

    def edit_column(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        dialog = EditColumnWithFunctionsDialog(self.controller, self.table_name, self.columns_info, self)
        if dialog.exec_():
            self.accept()

    def edit_record(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
        selected_items = self.data_table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        row = selected_items[0].row()
        row_data = {}

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        for col_idx in range(self.data_table.columnCount()):
            col_name = self.data_table.horizontalHeaderItem(col_idx).text()
            item = self.data_table.item(row, col_idx)
            row_data[col_name] = item.text() if item else ""

        dialog = EditRecordDialog(self.controller, self.table_name, self.columns_info, row_data, self)
        if dialog.exec_():
            self.accept()


class EditColumnWithFunctionsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
        column_layout = QHBoxLayout()
        column_layout.addWidget(QLabel("–°—Ç–æ–ª–±–µ—Ü:"))
        self.column_combo = QComboBox()
        self.column_combo.addItems([col['name'] for col in self.columns_info])
        column_layout.addWidget(self.column_combo)
        layout.addLayout(column_layout)

        # –û–ø–µ—Ä–∞—Ü–∏–∏
        operations_label = QLabel("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>")
        layout.addWidget(operations_label)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        rename_btn = QPushButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        rename_btn.clicked.connect(self.rename_column)
        layout.addWidget(rename_btn)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
        change_type_btn = QPushButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
        change_type_btn.clicked.connect(self.change_column_type)
        layout.addWidget(change_type_btn)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        set_constraint_btn = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        set_constraint_btn.clicked.connect(self.set_constraint)
        layout.addWidget(set_constraint_btn)

        # –°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        drop_constraint_btn = QPushButton("–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ")
        drop_constraint_btn.clicked.connect(self.drop_constraint)
        layout.addWidget(drop_constraint_btn)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        delete_btn.clicked.connect(self.delete_column)
        delete_btn.setStyleSheet("background-color: #d32f2f; color: white;")
        layout.addWidget(delete_btn)

        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        string_funcs_btn = QPushButton("üìù –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        string_funcs_btn.clicked.connect(self.apply_string_functions)
        layout.addWidget(string_funcs_btn)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)

    def get_current_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞."""
        return self.column_combo.currentText()

    def rename_column(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        old_name = self.get_current_column()
        new_name, ok = QInputDialog.getText(
            self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞",
            f"–ù–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{old_name}':",
            text=old_name
        )

        if ok and new_name and new_name != old_name:
            success, error = self.controller.rename_column(self.table_name, old_name, new_name)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old_name} ‚Üí {new_name}")
                current_index = self.column_combo.currentIndex()
                self.columns_info[current_index]['name'] = new_name
                self.column_combo.setItemText(current_index, new_name)
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")

    def change_column_type(self):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        types = ["INTEGER", "BIGINT", "VARCHAR(100)", "VARCHAR(200)", "TEXT", "BOOLEAN", "DATE", "TIMESTAMP", "NUMERIC"]
        new_type, ok = QInputDialog.getItem(
            self, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞",
            f"–ù–æ–≤—ã–π —Ç–∏–ø –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{column}':",
            types, 0, False
        )

        if ok and new_type:
            success, error = self.controller.alter_column_type(self.table_name, column, new_type)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ '{column}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_type}")
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞:\n{error}")

    def set_constraint(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü."""
        column = self.get_current_column()

        constraints = ["NOT NULL", "UNIQUE", "CHECK"]
        constraint, ok = QInputDialog.getItem(
            self, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è '{column}':",
            constraints, 0, False
        )

        if not ok:
            return

        constraint_value = None
        if constraint == "CHECK":
            constraint_value, ok = QInputDialog.getText(
                self, "–£—Å–ª–æ–≤–∏–µ CHECK",
                f"–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ CHECK –¥–ª—è '{column}':\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: {column} > 0)"
            )
            if not ok or not constraint_value:
                return

        success, error = self.controller.set_constraint(
            self.table_name, column, constraint, constraint_value
        )

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {constraint} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç–æ–ª–±–µ—Ü '{column}'")
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:\n{error}")

    def drop_constraint(self):
        """–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        constraints = ["NOT NULL", "UNIQUE", "CHECK"]
        constraint, ok = QInputDialog.getItem(
            self, "–°–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å '{column}':",
            constraints, 0, False
        )

        if ok:
            success, error = self.controller.drop_constraint(self.table_name, column, constraint)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ {constraint} —Å–Ω—è—Ç–æ —Å–æ —Å—Ç–æ–ª–±—Ü–∞ '{column}'")
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:\n{error}")

    def delete_column(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        column = self.get_current_column()

        confirm = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü '{column}'?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            QMessageBox.Yes | QMessageBox.No
        )

        if confirm == QMessageBox.Yes:
            success, error = self.controller.drop_column(self.table_name, column)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column}' —É–¥–∞–ª–µ–Ω")
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")

    def apply_string_functions(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫ —Å—Ç–æ–ª–±—Ü—É."""
        dialog = StringFunctionsDialog(self.controller, self.table_name, self.columns_info, self)
        dialog.exec_()


class AddDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏)."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.setWindowTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        self.setMinimumWidth(400)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</h3>"))

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
        add_column_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        add_column_btn.clicked.connect(self.add_column)
        layout.addWidget(add_column_btn)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        add_record_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
        add_record_btn.clicked.connect(self.add_record)
        layout.addWidget(add_record_btn)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)

    def add_column(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        dialog = AddColumnDialog(self.controller, self.table_name, self)
        if dialog.exec_():
            self.accept()

    def add_record(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
        dialog = AddRecordDialog(self.controller, self.table_name, self.columns_info, self)
        if dialog.exec_():
            self.accept()


class DeleteDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç–æ–ª–±—Ü–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏)."""
    def __init__(self, controller, table_name, columns_info, data_table, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info
        self.data_table = data_table

        self.setWindowTitle("–£–¥–∞–ª–µ–Ω–∏–µ")
        self.setMinimumWidth(400)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</h3>"))

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
        delete_column_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")
        delete_column_btn.clicked.connect(self.delete_column)
        layout.addWidget(delete_column_btn)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        delete_record_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")
        delete_record_btn.clicked.connect(self.delete_record)
        layout.addWidget(delete_record_btn)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)

    def delete_column(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞."""
        column, ok = QInputDialog.getItem(
            self, "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            [col['name'] for col in self.columns_info], 0, False
        )

        if not ok:
            return

        confirm = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü '{column}'?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
            QMessageBox.Yes | QMessageBox.No
        )

        if confirm == QMessageBox.Yes:
            success, error = self.controller.drop_column(self.table_name, column)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column}' —É–¥–∞–ª–µ–Ω")
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü:\n{error}")

    def delete_record(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏."""
        selected_items = self.data_table.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É –≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        confirm = QMessageBox.question(
            self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
            QMessageBox.Yes | QMessageBox.No
        )

        if confirm != QMessageBox.Yes:
            return

        row = selected_items[0].row()

        # –§–æ—Ä–º–∏—Ä—É–µ–º WHERE —É—Å–ª–æ–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        first_col_name = self.data_table.horizontalHeaderItem(0).text()
        first_value = self.data_table.item(row, 0).text()

        where_clause = f"{first_col_name} = %s"
        success, error = self.controller.delete_row(self.table_name, where_clause, [first_value])

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            self.accept()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{error}")


class SortFilterDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
    def __init__(self, controller, table_name, columns_info, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.table_name = table_name
        self.columns_info = columns_info

        self.where_clause = None
        self.order_clause = None
        self.group_clause = None
        self.having_clause = None

        self.setWindowTitle("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        self.setMinimumWidth(600)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è</h3>"))

        # WHERE —É—Å–ª–æ–≤–∏–µ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
        filter_group = QGroupBox("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è (WHERE)")
        filter_layout = QVBoxLayout(filter_group)

        self.where_edit = QLineEdit()
        self.where_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: id > 5 AND name LIKE '%test%'")
        filter_layout.addWidget(QLabel("–£—Å–ª–æ–≤–∏–µ WHERE:"))
        filter_layout.addWidget(self.where_edit)

        layout.addWidget(filter_group)

        # ORDER BY (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
        sort_group = QGroupBox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (ORDER BY)")
        sort_layout = QVBoxLayout(sort_group)

        self.order_edit = QLineEdit()
        self.order_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: id DESC, name ASC")
        sort_layout.addWidget(QLabel("–£—Å–ª–æ–≤–∏–µ ORDER BY:"))
        sort_layout.addWidget(self.order_edit)

        # –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        quick_sort_layout = QHBoxLayout()
        quick_sort_layout.addWidget(QLabel("–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:"))

        self.quick_sort_column = QComboBox()
        self.quick_sort_column.addItems([col['name'] for col in self.columns_info])
        quick_sort_layout.addWidget(self.quick_sort_column)

        asc_btn = QPushButton("‚¨Ü ASC")
        asc_btn.clicked.connect(lambda: self.quick_sort('ASC'))
        quick_sort_layout.addWidget(asc_btn)

        desc_btn = QPushButton("‚¨á DESC")
        desc_btn.clicked.connect(lambda: self.quick_sort('DESC'))
        quick_sort_layout.addWidget(desc_btn)

        sort_layout.addLayout(quick_sort_layout)
        layout.addWidget(sort_group)

        # GROUP BY (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)
        group_group = QGroupBox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (GROUP BY)")
        group_layout = QVBoxLayout(group_group)

        self.group_edit = QLineEdit()
        self.group_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: name")
        group_layout.addWidget(QLabel("–£—Å–ª–æ–≤–∏–µ GROUP BY:"))
        group_layout.addWidget(self.group_edit)

        # –ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å COUNT
        quick_group_layout = QHBoxLayout()
        quick_group_layout.addWidget(QLabel("–ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å COUNT:"))

        self.quick_group_column = QComboBox()
        self.quick_group_column.addItems([col['name'] for col in self.columns_info])
        quick_group_layout.addWidget(self.quick_group_column)

        group_btn = QPushButton("üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å")
        group_btn.clicked.connect(self.quick_group)
        quick_group_layout.addWidget(group_btn)

        group_layout.addLayout(quick_group_layout)
        layout.addWidget(group_group)

        # HAVING (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø)
        having_group = QGroupBox("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø (HAVING)")
        having_layout = QVBoxLayout(having_group)

        self.having_edit = QLineEdit()
        self.having_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: COUNT(*) > 5")
        having_layout.addWidget(QLabel("–£—Å–ª–æ–≤–∏–µ HAVING:"))
        having_layout.addWidget(self.having_edit)

        layout.addWidget(having_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        clear_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        clear_btn.clicked.connect(self.clear_all)
        buttons_layout.addWidget(clear_btn)

        buttons_layout.addStretch()

        apply_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
        apply_btn.clicked.connect(self.apply_filters)
        buttons_layout.addWidget(apply_btn)

        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(cancel_btn)

        layout.addLayout(buttons_layout)

    def quick_sort(self, direction):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É."""
        column = self.quick_sort_column.currentText()
        self.order_edit.setText(f"{column} {direction}")

    def quick_group(self):
        """–ë—ã—Å—Ç—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å COUNT."""
        column = self.quick_group_column.currentText()
        self.group_edit.setText(column)

    def clear_all(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π."""
        self.where_edit.clear()
        self.order_edit.clear()
        self.group_edit.clear()
        self.having_edit.clear()

    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self.where_clause = self.where_edit.text().strip() or None
        self.order_clause = self.order_edit.text().strip() or None
        self.group_clause = self.group_edit.text().strip() or None
        self.having_clause = self.having_edit.text().strip() or None

        self.accept()


class DisplayDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)."""
    def __init__(self, controller, current_table, parent=None):
        super().__init__(parent)
        self.controller = controller
        self.current_table = current_table

        self.setWindowTitle("–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
        self.setMinimumWidth(500)
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI."""
        layout = QVBoxLayout(self)

        layout.addWidget(QLabel("<h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–∞–º–∏</h3>"))

        # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        table_group = QGroupBox("–í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã")
        table_layout = QVBoxLayout(table_group)

        select_layout = QHBoxLayout()
        select_layout.addWidget(QLabel("–¢–∞–±–ª–∏—Ü–∞:"))

        self.table_combo = QComboBox()
        tables = self.controller.get_all_tables()
        self.table_combo.addItems(tables)

        if self.current_table and self.current_table in tables:
            self.table_combo.setCurrentText(self.current_table)

        select_layout.addWidget(self.table_combo)
        table_layout.addLayout(select_layout)

        layout.addWidget(table_group)

        # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π
        operations_group = QGroupBox("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π")
        operations_layout = QVBoxLayout(operations_group)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        rename_btn = QPushButton("‚öô –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        rename_btn.clicked.connect(self.rename_table)
        operations_layout.addWidget(rename_btn)

        layout.addWidget(operations_group)

        layout.addStretch()

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()

        select_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        select_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(select_btn)

        cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(cancel_btn)

        layout.addLayout(buttons_layout)

    def rename_table(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã."""
        old_name = self.table_combo.currentText()
        if not old_name:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É")
            return

        new_name, ok = QInputDialog.getText(
            self,
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã",
            f"–ù–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{old_name}':",
            text=old_name
        )

        if ok and new_name and new_name != old_name:
            success, error = self.controller.rename_table(old_name, new_name)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_name} ‚Üí {new_name}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                tables = self.controller.get_all_tables()
                self.table_combo.clear()
                self.table_combo.addItems(tables)
                self.table_combo.setCurrentText(new_name)
                self.current_table = new_name
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É:\n{error}")

